{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Clock.svelte",
    "../../MonitorPI100.svelte",
    "../../Ram.svelte"
  ],
  "sourcesContent": [
    "<script>\n\n    let _tick = 0;\n    let _on = false;\n    let _parts = [];\n\n    function getTick() {\n        return _tick;\n    }\n\n    function clickStep() {\n        if (_on) {\n            return;\n        }\n\n        step();\n    }\n\n    export function register(...parts) {\n        _parts.push(...parts);\n        console.log('registered', _parts);\n    }\n\n    export function unregister(part) {\n        _parts = _parts.filter(p => p !== part);\n    }\n\n    function step() {\n        _tick++;\n        _parts.forEach(part => {\n            part.controller.processNext(_tick);\n        });\n    }\n\n    function next() {\n        if (_on) {\n            step();\n            window.requestAnimationFrame(next);\n        }\n    }\n\n    function start() {\n        if (_on === true) {\n            return _tick;\n        }\n\n        _on = true;\n\n        window.requestAnimationFrame(next);\n\n        return _tick;\n    }\n\n    function stop() {\n        _on = false;\n        return _tick;\n    }\n\n</script>\n\n<style>\n    .clock {\n        display: flex;\n        justify-content: start;\n        align-items: center;\n    }\n\n    .tick-counter {\n        margin-left: 16px;\n    }\n\n    .start-stop {\n        width: 60px;\n    }\n</style>\n\n<div id=\"clock\" class=\"clock\">\n    {#if !_on}\n    <button type=\"button\" class=\"start-stop\" on:click={start}>Start</button>\n    {/if}\n    {#if _on}\n    <button type=\"button\" class=\"start-stop\" on:click={stop}>Stop</button>\n    {/if}\n    <button type=\"button\" disabled={_on} on:click={clickStep}>Step</button>\n    {#if !_on}\n    <div class=\"tick-counter\">{_tick}</div>\n    {/if}\n</div>",
    "<script>\n  import { Controller } from './controller';\n  import Ram from './Ram.svelte';\n  import { chars } from './chars.js';\n  import { onMount } from 'svelte';\n\n  const _screenCharWidth = 11;\n  const _screenCharHeight = 3;\n  const _charPixels = 64;\n  const _ramSize = _screenCharWidth * _screenCharHeight; // one unit per \"section\" or character\n  const _numChars = 96; // number if characters in library\n  let _power = false;\n  export const name = 'monitorPI100';\n  export const controller = new Controller(1, name);\n  // const ram = new Ram(_screenCharWidth * _screenCharHeight, 64); // 240\n  let drawQueue = [];\n\n  let ram;\n\n\n  let sections = [];\n  for (let i = 0; i < _screenCharWidth * _screenCharHeight; i++) {\n    const section = [];\n    for (let i = 0; i < _charPixels; i++) {\n      section.push(0);\n    }\n    sections.push(section);\n  }\n\n  function displayRandomChars() {\n    let tt = 33;\n    let rc = function() {\n      tt-=1;\n      if (tt < 0) {\n        return;\n      }\n\n      for (let j = 0; j < 1; j++) {\n        let c = randomNumber(0, _numChars + 1);\n        let s = randomNumber(0, sections.length);\n        _updateRam(s, _getChar(c));\n      }\n      window.requestAnimationFrame(rc);\n    }\n\n    window.requestAnimationFrame(rc);\n  }\n\n  displayRandomChars();\n\n  function randomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min) + min);\n  }\n\n\n  function screenStepFn() {\n    const charsPerStep = 1;\n\n    for (let i = 0; i < charsPerStep; i++) {\n      const s = drawQueue.shift();\n      if (s === undefined || s > _ramSize - 1) {\n        return;\n      }\n\n      _updateSection(s, ram.peek(s));\n    }\n\n    if (drawQueue.length > 0) {\n      window.requestAnimationFrame(screenStepFn);\n    }\n  }\n\n  function addToDrawQueue(address) {\n    if (drawQueue.indexOf(address) === -1) {\n      drawQueue.push(address);\n    }\n    if (drawQueue.length === 1) {\n      window.requestAnimationFrame(screenStepFn);\n    }\n  }\n\n  /**\n   * @param {number} i\n   * @return {number[]}\n   */\n  function _getChar(i) {\n    try {\n      const start = i * _charPixels;\n      const end = start + _charPixels;\n      return chars.slice(start, end);\n    } catch(e) {\n      return Array(_charPixels).fill(0);\n    }\n  }\n\n  /**\n   * @param {number} address\n   * @param {number[]} input\n   */\n  function _updateRam(address, input) {\n    console.assert(address != null);\n    console.assert(address < (_screenCharWidth * _screenCharHeight), address, (_screenCharWidth * _screenCharHeight) - 1);\n    console.assert(input.length == _charPixels, input.length, _charPixels);\n\n    ram.poke(address, input);\n    addToDrawQueue(address);\n  }\n\n  /**\n   * @param {number} section\n   * @param {number[]} input\n   */\n  function _updateSection(section, input) {\n    if (!input) {\n      return;\n    }\n\n    console.assert(section != null);\n    console.assert(section < (_screenCharWidth * _screenCharHeight), section, (_screenCharWidth * _screenCharHeight) - 1);\n    console.assert(input.length === _charPixels, input.length, _charPixels);\n\n    sections[section] = input;\n  }\n</script>\n\n<div style=\"display: flex;\">\n  <div id=\"monitor-s100\" class=\"monitor-s100\"\n    style=\"width: {_screenCharWidth * 8 * 3}px; height: {_screenCharHeight * 8 * 3}px;\">\n    {#each sections as section}\n      <div class=\"monitor-s100__section\">\n        {#each section as pixel}\n          <div\n            class=\"monitor-s100__pixel\"\n            class:monitor-s100__pixel_off={pixel == 0} />\n        {/each}\n      </div>\n    {/each}\n  </div>\n\n  <Ram size={_screenCharWidth * _screenCharHeight} internalSize=64 bind:this={ram} />\n</div>\n\n\n\n<style>\n  /*\n  amber: #FFBF00\n  green: #238823\n  dark green: #007000\n  forest green: #238823\n  */\n\n  .monitor-s100 {\n    --pixel-color: hsl(120, 60%, 70%);\n\n    width: 480px;\n    height: 288px;\n    background-color: #000;\n    border: 10px solid #000;\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  .monitor-s100__section {\n    width: 24px;\n    height: 24px;\n    display: flex;\n    flex-wrap: wrap;\n    /* filter: brightness(120%); */\n    /* filter: blur(0.5px); */\n  }\n\n  .monitor-s100__pixel {\n    /* filter: blur(0.3px); */\n    width: 3px;\n    height: 3px;\n    box-sizing: border-box;\n    background-color: var(--pixel-color);\n    box-shadow: 0px 0px 9px 1px rgba(34, 139, 34, 0.8);\n    border-radius: 1px;\n    border: 1px solid rgba(34, 139, 34, 0.6);\n  }\n\n  .monitor-s100__pixel_off {\n    background-color: transparent;\n    border-color: transparent;\n    box-shadow: none;\n  }\n</style>\n\n",
    "<script>\n\n  export let size;\n  export let internalSize;\n\n  internalSize = parseInt(internalSize);\n\n  console.assert(typeof size === 'number');\n  console.assert(size > 0);\n  console.assert(typeof internalSize === 'number', typeof internalSize);\n  console.assert(internalSize > 0);\n\n  let _memory; // array of int\n  // size = size; // int\n  // internalSize = internalSize;\n\n  _memory = new Array(size);\n  _memory.fill(new Array(internalSize).fill(0));\n\n  /**\n    * @param {number} address\n    * @return {number}\n    */\n  export function peek(address) { // address: int; return int\n    console.assert(typeof address === 'number');\n    console.assert(address < _memory.length);\n\n    return _memory[address] || [];\n  }\n\n  /**\n    *\n    * @param {number} address\n    * @param {number} value\n    * @return {number}\n    */\n  export function poke(address, value) {\n    console.assert(typeof address === 'number');\n    console.assert(address != null);\n    console.assert(address < _memory.length);\n    console.assert(typeof value === 'object', 'wrong type', typeof value, value);\n\n    const previous = _memory[address];\n    _memory[address] = value;\n\n    return previous;\n  }\n\n</script>\n\n<style>\n  .ram {\n    margin-left: 10px;\n    width: 50px;\n    height: 92px;\n    background-color: darkgray;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n</style>\n\n<div class=\"ram\">\n  <div>RAM</div>\n</div>"
  ],
  "names": [],
  "mappings": "AA6DI,MAAM,eAAC,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,KAAK,CACtB,WAAW,CAAE,MAAM,AACvB,CAAC,AAED,aAAa,eAAC,CAAC,AACX,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,WAAW,eAAC,CAAC,AACT,KAAK,CAAE,IAAI,AACf,CAAC;AC+EH,aAAa,cAAC,CAAC,AACb,aAAa,CAAE,kBAAkB,CAEjC,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,gBAAgB,CAAE,IAAI,CACtB,MAAM,CAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CACvB,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,sBAAsB,cAAC,CAAC,AACtB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,AAGjB,CAAC,AAED,oBAAoB,cAAC,CAAC,AAEpB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,CACX,UAAU,CAAE,UAAU,CACtB,gBAAgB,CAAE,IAAI,aAAa,CAAC,CACpC,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAClD,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,AAC1C,CAAC,AAED,wBAAwB,cAAC,CAAC,AACxB,gBAAgB,CAAE,WAAW,CAC7B,YAAY,CAAE,WAAW,CACzB,UAAU,CAAE,IAAI,AAClB,CAAC;ACxID,IAAI,cAAC,CAAC,AACJ,WAAW,CAAE,IAAI,CACjB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,QAAQ,CAC1B,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,AACzB,CAAC"
}